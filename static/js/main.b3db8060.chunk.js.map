{"version":3,"sources":["pages/StartGame.jsx","components/NumberPlate.jsx","pages/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["StartGame","react_default","a","createElement","className","Link","to","Component","NumberPlate","_this$props","this","props","number","setIdx","draggable","onClick","master","0","1","2","3","4","5","6","7","8","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","numList","width","height","idxA","idxB","orFinish","initNumList","bind","assertThisInitialized","_this$state","newNumList","i","j","push","shuffleNumList","setState","length","rand","Math","floor","random","_ref","_this2","plates","_loop","components_NumberPlate","key","concat","e","indexOf","_this$state2","target","classList","add","document","getElementsByClassName","notValidSelect","alert","remove","swapPanel","chkFinish","tmp","_this3","_this$state3","gameView","initGame","resetGame","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3db8060.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass StartGame\n extends Component {\n  render() {\n    return (\n      <div className=\"StartGame\">\n        <div>ゲームパック2018</div>\n        <div>\n          <Link to=\"/game\">エイトパズル</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StartGame\n;\n","import React, { Component } from 'react';\n\nclass NumberPlate\n extends Component {\n\n  render() {\n    let {number, setIdx} = this.props\n    return (\n      <div className=\"NumberPlate\" draggable=\"true\" onClick={setIdx}>\n        {number}\n      </div>\n    );\n  }\n}\n\nexport default NumberPlate\n;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport NumberPlate from '../components/NumberPlate'\n\nconst master = {\n  0: [0, 1, 3],\n  1: [1, 0, 2, 4],\n  2: [2, 1, 5],\n  3: [3, 0, 4, 6],\n  4: [4, 1, 3, 5, 7],\n  5: [5, 2, 4, 8],\n  6: [6, 3, 7],\n  7: [7, 4, 6, 8],\n  8: [8, 5, 7]\n}\n\nclass Game\n extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      numList: [[]],\n      width: 3,\n      height: 3,\n      idxA: null,\n      idxB: null,\n      orFinish: false\n    }\n    this.initNumList = this.initNumList.bind(this)\n    this.setIdx = this.setIdx.bind(this)\n  }\n\n  componentDidMount() {\n    let {width, height} = this.state\n    this.initNumList(width, height)\n  }\n\n  initNumList(width, height) {\n    let newNumList = []\n    for (let i = 0; i < width; i++) {\n      for (let j = 0; j < height; j++) {\n        newNumList.push(i*width+j)\n      }\n    }\n    this.shuffleNumList(newNumList)\n    this.setState({numList: newNumList})\n  }\n\n  shuffleNumList(numList) {\n    for (var i = numList.length - 1; i >= 0; i--){\n      // 0~iのランダムな数値を取得\n      var rand = Math.floor( Math.random() * ( i + 1 ) );\n      // 配列の数値を入れ替える\n      [numList[i], numList[rand]] = [numList[rand], numList[i]]\n    }\n  }\n\n  initGame(width, height) {\n    let plates = []\n    let {numList} = this.state\n    for(let i = 0; i < numList.length; i++) {\n      plates.push(<NumberPlate key={`plate_${i}`} number={numList[i]} setIdx={(e) => {this.setIdx(e, i)}} />)\n    }\n    return plates\n  }\n\n  notValidSelect(idxA, i) {\n    if (master[idxA].indexOf(i) >= 0) {\n      return false\n    } else return true\n  }\n\n  setIdx(e, i) {\n    let plates = []\n    let {numList, idxA} = this.state\n    if (idxA === null) {\n      e.target.classList.add('selected')\n      plates = document.getElementsByClassName('NumberPlate')\n      for (let j=1; j < master[i].length; j++) {\n        plates[master[i][j]].classList.add('selectable')\n      }\n      this.setState({idxA: i})\n    } else {\n      if (this.notValidSelect(idxA, i)) {\n        alert(\"その操作はできません\")\n        return\n      }\n      plates = document.getElementsByClassName('NumberPlate')\n      for (let j=0; j < plates.length; j++) {\n        plates[j].classList.remove('selected')\n        plates[j].classList.remove('selectable')\n      }\n      this.swapPanel(numList, idxA, i)\n      this.setState({idxA: null})\n      if (this.chkFinish(numList)) {\n        for (let j=0; j < plates.length; j++) {\n          plates[j].classList.add('completed')\n          this.setState({orFinish: true})\n        }\n      }\n    }\n  }\n\n  swapPanel(numList, idxA, idxB) {\n    let tmp = numList[idxA]\n    numList[idxA] = numList[idxB]\n    numList[idxB] = tmp\n  }\n\n  chkFinish(numList) {\n    for (let i=0; i < numList.length; i++){\n      if (numList[i] !== i) {\n        return false\n      }\n    }\n    return true\n  }\n\n  resetGame(width, height) {\n    this.initNumList(width, height)\n    let plates = document.getElementsByClassName('NumberPlate')\n    for (let j=0; j < plates.length; j++) {\n      plates[j].classList.remove('selected')\n      plates[j].classList.remove('selectable')\n      plates[j].classList.remove('completed')\n    }\n    this.setState({orFinish: false})\n  }\n\n  render() {\n    let {orFinish, width, height} = this.state\n    let gameView = this.initGame(3, 3)\n    return (\n      <div>\n        <div className=\"CompMessage\">{orFinish ? \"CONGURATURATION\": null}</div>\n        <div className=\"Game\">\n          {gameView}\n        </div>\n        <div className=\"tryAgainButton\" onClick={()=>this.resetGame(width, height)}>{orFinish ? \"もう一度やる\": null}</div>\n        <Link to=\"/\">トップに戻る</Link>\n      </div>\n    );\n  }\n}\n\nexport default Game\n;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport StartGame from './pages/StartGame'\nimport Game from './pages/Game'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <div>\n            <Route exact path='/' component={StartGame} />\n            <Route exact path='/game' component={Game} />\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}